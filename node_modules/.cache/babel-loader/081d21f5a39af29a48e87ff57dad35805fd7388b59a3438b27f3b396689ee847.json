{"ast":null,"code":"var _jsxFileName = \"/Users/angelax/Angela/website/site/src/components/Pix2VoxPage.js\";\nimport \"./style/General.css\";\nimport \"./style/Pix2VoxPage.css\";\nimport NavBar from \"./NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pix2VoxPage = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"pix-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" PIX2VOX \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" November 2022 \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" Python \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"pix-content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The goal of this project was to implement the \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"pix-link\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://github.com/hzxie/Pix2Vox\",\n                target: \"_none\",\n                children: \"Pix2Vox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 102\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 75\n            }, this), \" code in TensorFlow (the original code was written using PyTorch). Pix2Vox is a method that recovers 3D representations of objects from single and multi-view images. In this project, I implemented the Pix2Vox-F version which includes the following:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"an encoder-decoder used to compute a set of features and recover the 3D shape of the object\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"a context aware fusion model to select high-quality reconstructions for each part of the object to later fuse together into the final re sult\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 29\n            }, this), \"The method has 2 different versions: Pix2Vox-F and Pix2Vox- A. Pix2Vox-F uses an encoder-decoder to compute a set of features and recover the 3D shape of the object and a fusion model that aims to select high-quality reconstructions for each part of the object to later fuse together into the final result. Pix2Vox-A has all of the aforementioned components as well as a refiner which seeks to correct parts of the 3D volumes that were recovered incorrectly. In this project, I reimplemented Pix2Vox-F.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_c = Pix2VoxPage;\nexport default Pix2VoxPage;\nvar _c;\n$RefreshReg$(_c, \"Pix2VoxPage\");","map":{"version":3,"names":["NavBar","Pix2VoxPage"],"sources":["/Users/angelax/Angela/website/site/src/components/Pix2VoxPage.js"],"sourcesContent":["import \"./style/General.css\"\nimport \"./style/Pix2VoxPage.css\"\n\nimport NavBar from \"./NavBar\";\n\nconst Pix2VoxPage = () => {\n    return (\n        <div className=\"page\">\n            <NavBar />\n\n            <div className=\"page-container\">\n                <div className=\"content\">\n\n                    {/* Summary Section */}\n                    <div id=\"pix-header\">\n                        <h1> PIX2VOX </h1>\n                        <h2> November 2022 </h2>\n                        <h2> Python </h2>\n                    </div>\n\n                    <div class=\"pix-content\">\n                        <p>\n                            The goal of this project was to implement the <span className=\"pix-link\"><a href=\"https://github.com/hzxie/Pix2Vox\" target=\"_none\">Pix2Vox</a></span> code in TensorFlow (the original\n                            code was written using PyTorch). Pix2Vox is a method that recovers 3D representations of objects from single and multi-view images.\n                            In this project, I implemented the Pix2Vox-F version which includes the following:\n\n                            <ul>\n                                <li>\n                                    an encoder-decoder used to compute a set of features and recover the 3D shape of the object\n                                </li>\n                                <li>\n                                    a context aware fusion model to select high-quality reconstructions for each part of the object to later fuse together into the final re sult\n                                </li>\n                            </ul>\n\n                            The method has 2 different versions: Pix2Vox-F and Pix2Vox-\n                            A. Pix2Vox-F uses an encoder-decoder to compute a set of features and recover the 3D shape of the object and a fusion model that aims to select high-quality reconstructions for\n                            each part of the object to later fuse together into the final result. Pix2Vox-A has all of the aforementioned components as well as a refiner which seeks to correct parts of the 3D volumes\n                            that were recovered incorrectly. In this project, I reimplemented Pix2Vox-F.\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Pix2VoxPage;"],"mappings":";AAAA,OAAO,qBAAqB;AAC5B,OAAO,yBAAyB;AAEhC,OAAOA,MAAM,MAAM,UAAU;AAAC;AAE9B,MAAMC,WAAW,GAAG,MAAM;EACtB,oBACI;IAAK,SAAS,EAAC,MAAM;IAAA,wBACjB,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eAEV;MAAK,SAAS,EAAC,gBAAgB;MAAA,uBAC3B;QAAK,SAAS,EAAC,SAAS;QAAA,wBAGpB;UAAK,EAAE,EAAC,YAAY;UAAA,wBAChB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAkB,eAClB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAwB,eACxB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAiB;QAAA;UAAA;UAAA;UAAA;QAAA,QACf,eAEN;UAAK,KAAK,EAAC,aAAa;UAAA,uBACpB;YAAA,0EACkD;cAAM,SAAS,EAAC,UAAU;cAAA,uBAAC;gBAAG,IAAI,EAAC,kCAAkC;gBAAC,MAAM,EAAC,OAAO;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAY;cAAA;cAAA;cAAA;YAAA,QAAO,2QAIrJ;cAAA,wBACI;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK,eACL;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QAEK;YAAA;cAAA;cAAA;cAAA;YAAA,QACJ;UAAA;YAAA;YAAA;YAAA;UAAA;QAML;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;AAAA,KAxCKA,WAAW;AA0CjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}